## ruff
[tool.ruff]
line-length = 128
src = ["src", "test", "simulator", "ignore"]

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = true

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [
# "AIR", # Airflow (AIR)
# "ERA", # eradicate (ERA)
# "FAST", # FastAPI (FAST)
 "YTT", # flake8-2020 (YTT)
# "ANN", # flake8-annotations (ANN)
# "ASYNC", # flake8-async (ASYNC)
# "S", # flake8-bandit (S)
# "BLE", # flake8-blind-except (BLE)
# "FBT", # flake8-boolean-trap (FBT)
 "B", # flake8-bugbear (B)
 "A", # flake8-builtins (A)
# "COM", # flake8-commas (COM)
 "C4", # flake8-comprehensions (C4)
# "CPY", # flake8-copyright (CPY)
# "DTZ", # flake8-datetimez (DTZ)
# "T10", # flake8-debugger (T10)
# "DJ", # flake8-django (DJ)
# "EM", # flake8-errmsg (EM)
# "EXE", # flake8-executable (EXE)
 "FIX", # flake8-fixme (FIX)
 "FA", # flake8-future-annotations (FA)
# "INT", # flake8-gettext (INT)
 "ISC", # flake8-implicit-str-concat (ISC)
 "ICN", # flake8-import-conventions (ICN)
 "LOG", # flake8-logging (LOG)
# "G", # flake8-logging-format (G)
# "INP", # flake8-no-pep420 (INP)
# "PIE", # flake8-pie (PIE)
# "T20", # flake8-print (T20)
 "PYI", # flake8-pyi (PYI)
# "PT", # flake8-pytest-style (PT)
# "Q", # flake8-quotes (Q)
# "RSE", # flake8-raise (RSE)
 "RET", # flake8-return (RET)
 "SLF", # flake8-self (SLF)
# "SIM", # flake8-simplify (SIM)
# "SLOT", # flake8-slots (SLOT)
# "TID", # flake8-tidy-imports (TID)
 "TD", # flake8-todos (TD)
# "TC", # flake8-type-checking (TC)
# "ARG", # flake8-unused-arguments (ARG)
 "PTH", # flake8-use-pathlib (PTH)
# "FLY", # flynt (FLY)
# "I", # isort (I)
# "C90", # mccabe (C90)
# "NPY", # NumPy-specific rules (NPY)
# "PD", # pandas-vet (PD)
 "N", # pep8-naming (N)
 "PERF", # Perflint (PERF)
 "E", # Code Style Error (E)
 "W", # Code Style Warning (W)
# "DOC", # pydoclint (DOC)
# "D", # pydocstyle (D)
 "F", # Pyflakes (F)
# "PGH", # pygrep-hooks (PGH)
# "PL", # Pylint (PL)
 "PLC", # Convention (PLC)
 "PLE", # Error (PLE)
# "PLR", # Refactor (PLR)
# "PLW", #  Warning (PLW)
 "UP", # pyupgrade (UP)
# "FURB", # refurb (FURB)
# "RUF", # Ruff-specific rules (RUF)
# "TRY", # tryceratops (TRY)
]
ignore = ["RUF012"]

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true
# suppress-none-returning = true

[tool.ruff.lint.isort]
combine-as-imports = true
# force-sort-within-sections = true
split-on-trailing-comma = false

## mypy
[tool.mypy]
# install mypy: pip install mypy
# in ./python use: 
# mypy src/*.py src/hardware/*.py src/simulate/*.py simulator/*.py
ignore_missing_imports = true
disable_error_code = ["annotation-unchecked", "import-untyped"]

[tool.mypy-cv2]
ignore_missing_imports = true

[tool.mypy-imutils]
ignore_missing_imports = true

[tool.mypy-gpiozero]
ignore_missing_imports = true

[tool.mypy-PIL]
ignore_missing_imports = true

[tool.mypy-picamera]
ignore_missing_imports = true

## pylint
[tool.pylint.MASTER]
disable=["unnecessary-pass", "logging-fstring-interpolation", "line-too-long", "import-outside-toplevel", "wrong-import-position"]

[tool.pylint.TYPECHECK]
generated-members="cv2"
ignored-modules=["adafruit_ssd1306", "board", "smbus", "picamera", "picamera.array"]

[tool.pylint.FORMAT]
max-line-length=128

[tool.pylint.BASIC]
# Good variable names which should always be accepted, separated by a comma
good-names=["h","i","j","k","w","x","y","h1","h2","w1","w2","x1","x2","y1","y2","_"]

## pyright
[tool.pyright]
venvPath = "."
venv = ".venv"

## coverage
[tool.coverage.run]
source = ["src"]

omit = [
	"*/hardware/oled.py", 	# requires special hardware
	"*/hardware/camera.py",
	"*/api_server_thread.py", 	# dispatcher for flask web app
	"*/scrabscrap.py", 	# starter of main application
	"*/upload.py",
	"*/upload_impl.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    # "@(abc\.)?abstractmethod",
    # "@(abc\.)?main",
    "logging.debug",
    "logging.info",
    "logging.warning",
    "logging.error",
    "assert",
    "pass"
]